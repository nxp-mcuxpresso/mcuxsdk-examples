/*
 * Copyright 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2021 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

/*
 * Motor Control - Configuration File
 */

#ifndef _MC_PERIPH_INIT_H_
#define _MC_PERIPH_INIT_H_

#include "fsl_device_registers.h"
#include "mcdrv_pwm3ph_ftm.h"
#include "mcdrv_adc_lpc860.h"
#include "fsl_common.h"
#include "fsl_power.h"
#include "fsl_acomp.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

#define LED_B_ON()                                                                  \
    GPIO_PortClear(BOARD_INITLEDSPINS_LED_BLUE_GPIO, BOARD_INITLEDSPINS_LED_BLUE_PORT,\
                   1U << BOARD_INITLEDSPINS_LED_BLUE_PIN)

#define LED_B_OFF()                                                                \
    GPIO_PortSet(BOARD_INITLEDSPINS_LED_BLUE_GPIO, BOARD_INITLEDSPINS_LED_BLUE_PORT,\
                 1U << BOARD_INITLEDSPINS_LED_BLUE_PIN) 

#define LED_B_TOGGLE()                                           \
    GPIO_PortToggle(BOARD_INITLEDSPINS_LED_BLUE_GPIO, BOARD_INITLEDSPINS_LED_BLUE_PORT, \
                    1U << BOARD_INITLEDSPINS_LED_BLUE_PIN)

#define LED_R_ON()                                                                  \
    GPIO_PortClear(BOARD_INITLEDSPINS_LED_RED_GPIO, BOARD_INITLEDSPINS_LED_RED_PORT,\
                   1U << BOARD_INITLEDSPINS_LED_RED_PIN)

#define LED_R_OFF()                                                                \
    GPIO_PortSet(BOARD_INITLEDSPINS_LED_RED_GPIO, BOARD_INITLEDSPINS_LED_RED_PORT, \
                 1U << BOARD_INITLEDSPINS_LED_RED_PIN) 
           
#define LED_R_TOGGLE()                                           \
    GPIO_PortToggle(BOARD_INITLEDSPINS_LED_RED_GPIO, BOARD_INITLEDSPINS_LED_RED_PORT, \
                    1U << BOARD_INITLEDSPINS_LED_RED_PIN)

#define LED_G_ON()                                                                  \
    GPIO_PortClear(BOARD_INITLEDSPINS_LED_GREEN_GPIO, BOARD_INITLEDSPINS_LED_GREEN_PORT,\
                   1U << BOARD_INITLEDSPINS_LED_GREEN_PIN)

#define LED_G_OFF()                                                                \
    GPIO_PortSet(BOARD_INITLEDSPINS_LED_GREEN_GPIO, BOARD_INITLEDSPINS_LED_GREEN_PORT,\
                 1U << BOARD_INITLEDSPINS_LED_GREEN_PIN) 
      
      
#define LED_G_TOGGLE()                                           \
    GPIO_PortToggle(BOARD_INITLEDSPINS_LED_GREEN_GPIO, BOARD_INITLEDSPINS_LED_GREEN_PORT, \
                    1U << BOARD_INITLEDSPINS_LED_GREEN_PIN)
   
      
/******************************************************************************
 * Timing
 ******************************************************************************/
/* Fast loop interrupt generation timer*/
#define M1_PWM_TIMER            (FTM0)
/* PWM generation timer */
#define M1_PWM_TIMER_FTM0
/* PWM frequency in Hz*/
#define M1_PWM_FREQ             (10000U)
/* PWM modulo = FTM_input_clock / M1_PWM_FREQ */
#define M1_PWM_MODULO           (CLOCK_GetFreq(kCLOCK_CoreSysClk) / M1_PWM_FREQ)
/* PWM vs. Fast control loop ratio */
#define M1_FOC_FREQ_VS_PWM_FREQ (1U)
/* Fast loop frequency in Hz */
#define M1_FAST_LOOP_FREQ       (M1_PWM_FREQ / M1_FOC_FREQ_VS_PWM_FREQ)
/* Slow loop interrupt generation timer*/
#define M1_SLOW_LOOP_TIMER      (FTM2)
/* Slow loop interrupt generation timer */
#define M1_SLOW_LOOP_TIMER_FTM2
/* Slow control loop frequency */
#define M1_SLOW_LOOP_FREQ       (1000U)
/* Slow Loop modulo = FTM_input_clock / M1_SLOW_LOOP_FREQ */
#define M1_SLOW_LOOP_MODULO     (CLOCK_GetFreq(kCLOCK_CoreSysClk) / M1_SLOW_LOOP_FREQ)
/* Fast loop period */
#define M1_FAST_LOOP_TS         ((float_t)1.0 / (float_t)(M1_FAST_LOOP_FREQ))
/* Slow loop period */
#define M1_SLOW_LOOP_TS         ((float_t)1.0 / (float_t)(M1_SLOW_LOOP_FREQ))

 /******************************************************************************
  * Output control
  ******************************************************************************/
/* Assignment of FTM channels to motor phases */
#define M1_PWM_PAIR_PHA         (0U)
#define M1_PWM_PAIR_PHB         (2U)
#define M1_PWM_PAIR_PHC         (4U)

/* Output PWM deadtime prescaler */
#define M1_PWM_DEADTIME_LENGTH_DTPS     (1U)
/* Output PWM deadtime register value */
#define M1_PWM_DEADTIME_LENGTH_DTVAL    (63U)

/* Over-current Fault enable */
/* For enable Over-current fault is needed connect J6_8 (PIO0_14) with J1_9 (P0_13) on LPC board by wire
   (J2_9 with J4_8 on FRDM-MC-LVPMSM) and enable M1_FAULT_ENABLE macro. */
#define M1_FAULT_ENABLE         (0U)
/* Over-current Fault detection number */
#define M1_FAULT_NUM            (0U)
/* Over-current Fault detection polarity */
#define M1_FAULT_POL            (0U)
/* Over-current Fault detection threshold */
#define M1_FAULT_CMP_THRESHOLD  (25U)

/* DC bus braking resistor control */
#define M1_BRAKE_SET()          
#define M1_BRAKE_CLEAR()        
/* DC bus braking threshold hysteresis */
#define M1_U_DCB_HYSTERESIS             (0.05F)
#define M1_U_DCB_UPPER_THRESHOLD        (frac16_t)((M1_U_DCB_TRIP) * (1.0F + (M1_U_DCB_HYSTERESIS)))
#define M1_U_DCB_LOWER_THRESHOLD        (frac16_t)((M1_U_DCB_TRIP) * (1.0F - (M1_U_DCB_HYSTERESIS)))
  
/* Top and Bottom transistors PWM polarity */
#define M1_PWM_POL_TOP         (1U)
#define M1_PWM_POL_BOTTOM      (1U)

/******************************************************************************
 * ADC measurement definition
 ******************************************************************************/
/* Configuration of ADC channels according to the input pin signal */
#define CUR_A_CHANNEL_NUMBER    6U
#define CUR_B_CHANNEL_NUMBER    7U
#define CUR_C_CHANNEL_NUMBER    8U
#define VOLT_DCB_CHANNEL_NUMBER 9U     

/******************************************************************************
 * MC driver macro definition and check - do not change this part
 ******************************************************************************/
/******************************************************************************
 * Define motor ADC control functions
 ******************************************************************************/
#define M1_MCDRV_ADC_GET(par) \
    MCDRV_CurrAndVoltDcBusGet(par)
#define M1_MCDRV_CURR_3PH_CHAN_ASSIGN(par)
#define M1_MCDRV_CURR_3PH_CALIB_INIT(par) (MCDRV_Curr3Ph2ShCalibInit(par))
#define M1_MCDRV_CURR_3PH_CALIB(par) (MCDRV_Curr3Ph2ShCalib(par))
#define M1_MCDRV_CURR_3PH_CALIB_SET(par) (MCDRV_Curr3Ph2ShCalibSet(par))

/******************************************************************************
 * Define motor 3-ph PWM control functions
 ******************************************************************************/
#define M1_MCDRV_PWM3PH_SET(par) (MCDRV_FtmPwm3PhSet(par))
#define M1_MCDRV_PWM3PH_EN(par) (MCDRV_FtmPwm3PhOutEn(par))
#define M1_MCDRV_PWM3PH_DIS(par) (MCDRV_FtmPwm3PhOutDis(par))
#define M1_MCDRV_PWM3PH_FLT_GET(par) (MCDRV_FtmPwm3PhFltGet(par))
    
/******************************************************************************
 * global variable definitions
 ******************************************************************************/
extern mcdrv_pwm3ph_ftm_t g_sM1Pwm3ph;
extern mcdrv_adc_t g_sM1AdcSensor;

/*******************************************************************************
 * API
 ******************************************************************************/

void MCDRV_Init_M1(void);
void MCDRV_Calib_ADC(void);

#if defined(__cplusplus)
}
#endif /* __cplusplus */

#endif /* _MC_PERIPH_INIT_H_  */
