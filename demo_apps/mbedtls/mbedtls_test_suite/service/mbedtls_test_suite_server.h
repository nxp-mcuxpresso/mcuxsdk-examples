/*
 * Copyright (c) 2014-2016, Freescale Semiconductor, Inc.
 * Copyright 2016 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Generated by erpcgen 1.10.0 on Thu Oct 13 21:22:07 2022.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_mbedtls_test_suite_server_h_)
#define _mbedtls_test_suite_server_h_

#ifdef __cplusplus
#include "erpc_server.hpp"
#include "erpc_codec.hpp"
extern "C"
{
#include "mbedtls_test_suite.h"
#include <stdint.h>
#include <stdbool.h>
}

#if 11000 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif


/*!
 * @brief Service subclass for test_suite.
 */
class test_suite_service : public erpc::Service
{
public:
    test_suite_service() : Service(ktest_suite_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for board_get_name of test_suite interface. */
    erpc_status_t board_get_name_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_aes_encrypt_ecb of test_suite interface. */
    erpc_status_t board_aes_encrypt_ecb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_aes_decrypt_ecb of test_suite interface. */
    erpc_status_t board_aes_decrypt_ecb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_aes_encrypt_cbc of test_suite interface. */
    erpc_status_t board_aes_encrypt_cbc_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_aes_decrypt_cbc of test_suite interface. */
    erpc_status_t board_aes_decrypt_cbc_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_aes_encrypt_cfb128 of test_suite interface. */
    erpc_status_t board_aes_encrypt_cfb128_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_aes_decrypt_cfb128 of test_suite interface. */
    erpc_status_t board_aes_decrypt_cfb128_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_aes_encrypt_cfb8 of test_suite interface. */
    erpc_status_t board_aes_encrypt_cfb8_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_aes_decrypt_cfb8 of test_suite interface. */
    erpc_status_t board_aes_decrypt_cfb8_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_mbedtls_aes_self_test of test_suite interface. */
    erpc_status_t board_mbedtls_aes_self_test_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des_check_weak of test_suite interface. */
    erpc_status_t board_des_check_weak_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des_encrypt_ecb of test_suite interface. */
    erpc_status_t board_des_encrypt_ecb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des_decrypt_ecb of test_suite interface. */
    erpc_status_t board_des_decrypt_ecb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des_encrypt_cbc of test_suite interface. */
    erpc_status_t board_des_encrypt_cbc_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des_decrypt_cbc of test_suite interface. */
    erpc_status_t board_des_decrypt_cbc_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des3_encrypt_ecb of test_suite interface. */
    erpc_status_t board_des3_encrypt_ecb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des3_decrypt_ecb of test_suite interface. */
    erpc_status_t board_des3_decrypt_ecb_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des3_encrypt_cbc of test_suite interface. */
    erpc_status_t board_des3_encrypt_cbc_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des3_decrypt_cbc of test_suite interface. */
    erpc_status_t board_des3_decrypt_cbc_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_des_key_parity_run of test_suite interface. */
    erpc_status_t board_des_key_parity_run_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_mbedtls_des_self_test of test_suite interface. */
    erpc_status_t board_mbedtls_des_self_test_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_mbedtls_sha1 of test_suite interface. */
    erpc_status_t board_mbedtls_sha1_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_sha224 of test_suite interface. */
    erpc_status_t board_sha224_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_mbedtls_sha256 of test_suite interface. */
    erpc_status_t board_mbedtls_sha256_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_sha384 of test_suite interface. */
    erpc_status_t board_sha384_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_mbedtls_sha512 of test_suite interface. */
    erpc_status_t board_mbedtls_sha512_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_sha1_selftest of test_suite interface. */
    erpc_status_t board_sha1_selftest_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_sha256_selftest of test_suite interface. */
    erpc_status_t board_sha256_selftest_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for board_sha512_selftest of test_suite interface. */
    erpc_status_t board_sha512_selftest_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

extern "C" {
#else
#include "mbedtls_test_suite.h"
#endif // __cplusplus

typedef void * erpc_service_t;

/*! @brief Return test_suite_service service object. */
erpc_service_t create_test_suite_service(void);

/*! @brief Destroy test_suite_service service object. */
void destroy_test_suite_service(erpc_service_t service);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _mbedtls_test_suite_server_h_
