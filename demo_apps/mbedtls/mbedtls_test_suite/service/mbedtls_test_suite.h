/*
 * Copyright (c) 2014-2016, Freescale Semiconductor, Inc.
 * Copyright 2016 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Generated by erpcgen 1.10.0 on Thu Oct 13 21:22:07 2022.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_mbedtls_test_suite_h_)
#define _mbedtls_test_suite_h_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include "erpc_version.h"

#if 11000 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

#if !defined(ERPC_TYPE_DEFINITIONS)
#define ERPC_TYPE_DEFINITIONS

// Aliases data types declarations
typedef struct data_t data_t;

// Structures/unions data types declarations
struct data_t
{
    int8_t * x;
    int32_t len;
};


// Constant variable declarations
extern const uint8_t StringMaxSize;

#endif // ERPC_TYPE_DEFINITIONS

/*! @brief test_suite identifiers */
enum _test_suite_ids
{
    ktest_suite_service_id = 1,
    ktest_suite_board_get_name_id = 1,
    ktest_suite_board_aes_encrypt_ecb_id = 2,
    ktest_suite_board_aes_decrypt_ecb_id = 3,
    ktest_suite_board_aes_encrypt_cbc_id = 4,
    ktest_suite_board_aes_decrypt_cbc_id = 5,
    ktest_suite_board_aes_encrypt_cfb128_id = 6,
    ktest_suite_board_aes_decrypt_cfb128_id = 7,
    ktest_suite_board_aes_encrypt_cfb8_id = 8,
    ktest_suite_board_aes_decrypt_cfb8_id = 9,
    ktest_suite_board_mbedtls_aes_self_test_id = 10,
    ktest_suite_board_des_check_weak_id = 11,
    ktest_suite_board_des_encrypt_ecb_id = 12,
    ktest_suite_board_des_decrypt_ecb_id = 13,
    ktest_suite_board_des_encrypt_cbc_id = 14,
    ktest_suite_board_des_decrypt_cbc_id = 15,
    ktest_suite_board_des3_encrypt_ecb_id = 16,
    ktest_suite_board_des3_decrypt_ecb_id = 17,
    ktest_suite_board_des3_encrypt_cbc_id = 18,
    ktest_suite_board_des3_decrypt_cbc_id = 19,
    ktest_suite_board_des_key_parity_run_id = 20,
    ktest_suite_board_mbedtls_des_self_test_id = 21,
    ktest_suite_board_mbedtls_sha1_id = 22,
    ktest_suite_board_sha224_id = 23,
    ktest_suite_board_mbedtls_sha256_id = 24,
    ktest_suite_board_sha384_id = 25,
    ktest_suite_board_mbedtls_sha512_id = 26,
    ktest_suite_board_sha1_selftest_id = 27,
    ktest_suite_board_sha256_selftest_id = 28,
    ktest_suite_board_sha512_selftest_id = 29,
};

#if defined(__cplusplus)
extern "C" {
#endif

//! @name test_suite
//@{
void board_get_name(char * name);

/*! AES */
int32_t board_aes_encrypt_ecb(const data_t * key_str, const data_t * src_str, const data_t * hex_dst_string, int32_t setkey_result);

int32_t board_aes_decrypt_ecb(const data_t * key_str, const data_t * src_str, const data_t * hex_dst_string, int32_t setkey_result);

int32_t board_aes_encrypt_cbc(const data_t * key_str, const data_t * iv_str, const data_t * src_str, const data_t * hex_dst_string, int32_t cbc_result);

int32_t board_aes_decrypt_cbc(const data_t * key_str, const data_t * iv_str, const data_t * src_str, const data_t * hex_dst_string, int32_t cbc_result);

int32_t board_aes_encrypt_cfb128(const data_t * key_str, const data_t * iv_str, const data_t * src_str, const data_t * hex_dst_string);

int32_t board_aes_decrypt_cfb128(const data_t * key_str, const data_t * iv_str, const data_t * src_str, const data_t * hex_dst_string);

int32_t board_aes_encrypt_cfb8(const data_t * key_str, const data_t * iv_str, const data_t * src_str, const data_t * hex_dst_string);

int32_t board_aes_decrypt_cfb8(const data_t * key_str, const data_t * iv_str, const data_t * src_str, const data_t * hex_dst_string);

int32_t board_mbedtls_aes_self_test(int32_t verbose);

/*! DES */
int32_t board_des_check_weak(const data_t * key, int32_t ret);

int32_t board_des_encrypt_ecb(const data_t * hex_key, const data_t * hex_src, const data_t * hex_dst);

int32_t board_des_decrypt_ecb(const data_t * hex_key, const data_t * hex_src, const data_t * hex_dst);

int32_t board_des_encrypt_cbc(const data_t * hex_key, const data_t * hex_iv, const data_t * hex_src, const data_t * hex_dst, int32_t cbc_result);

int32_t board_des_decrypt_cbc(const data_t * hex_key, const data_t * hex_iv, const data_t * hex_src, const data_t * hex_dst, int32_t cbc_result);

int32_t board_des3_encrypt_ecb(int32_t key_count, const data_t * hex_key, const data_t * hex_src, const data_t * hex_dst);

int32_t board_des3_decrypt_ecb(int32_t key_count, const data_t * hex_key, const data_t * hex_src, const data_t * hex_dst);

int32_t board_des3_encrypt_cbc(int32_t key_count, const data_t * hex_key, const data_t * hex_iv, const data_t * hex_src, const data_t * hex_dst, int32_t cbc_result);

int32_t board_des3_decrypt_cbc(int32_t key_count, const data_t * hex_key, const data_t * hex_iv, const data_t * hex_src, const data_t * hex_dst, int32_t cbc_result);

int32_t board_des_key_parity_run(void);

int32_t board_mbedtls_des_self_test(int32_t verbose);

/*! SHAX */
int32_t board_mbedtls_sha1(const data_t * src_str, const data_t * hex_hash_string);

int32_t board_sha224(const data_t * src_str, const data_t * hex_hash_string);

int32_t board_mbedtls_sha256(const data_t * src_str, const data_t * hex_hash_string);

int32_t board_sha384(const data_t * src_str, const data_t * hex_hash_string);

int32_t board_mbedtls_sha512(const data_t * src_str, const data_t * hex_hash_string);

int32_t board_sha1_selftest(int32_t verbose);

int32_t board_sha256_selftest(int32_t verbose);

int32_t board_sha512_selftest(int32_t verbose);
//@}

#if defined(__cplusplus)
}
#endif

#endif // _mbedtls_test_suite_h_
