# yaml-language-server: $schema=../../../../scripts/data_schema/example_description_schema.json
#
# Copyright 2024 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
freertos_event:
  section-type: application
  contents:
    meta_path: examples/freertos_examples/freertos_event
    project-root-path: boards/${board}/freertos_examples/freertos_event/${multicore_foldername}
    document:
      name: freertos_event${core_id_suffix_name}
      category: freertos_examples
      brief: This document explains the freertos_event example. It shows how task
        waits for an event (defined setof bits in event group). This event can be
        set by any other process or interrupt in the system.The example application
        creates three tasks. Two write tasks write_task_1 and write_task_2continuously
        setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing
        actual state on console. Event bits areautomatically cleared after read task
        is entered.Three possible states can occurre:Both bits are set.zBit B0 is
        set.Bit B1 is set.
      example_readme:
      - examples/freertos_examples/freertos_event/readme.md
      - examples/_boards/${board}/freertos_examples/freertos_event/example_board_readme.md
      - examples/_boards/${board}/examples_shared_readme.md
  boards:
    evk9mimx8ulp@cm33: []
    evkbimxrt1050: []
    evkbmimxrt1060: []
    evkbmimxrt1170@cm4: []
    evkbmimxrt1170@cm7: []
    evkcmimxrt1060: []
    evkmcimx7ulp: []
    evkmimx8mm: []
    evkmimx8mn: []
    evkmimx8mnddr3l: []
    evkmimx8mp: []
    evkmimx8mq: []
    evkmimx8ulp@cm33: []
    evkmimxrt1010: []
    evkmimxrt1015: []
    evkmimxrt1020: []
    evkmimxrt1024: []
    evkmimxrt1040: []
    evkmimxrt1064: []
    evkmimxrt1160@cm4: []
    evkmimxrt1160@cm7: []
    evkmimxrt1180@cm33: []
    evkmimxrt1180@cm7: []
    evkmimxrt595@cm33: []
    evkmimxrt685@cm33: []
    frdmk22f: []
    frdmk32l2a4s: []
    frdmk32l2b: []
    frdmk32l3a6@cm0plus: []
    frdmk32l3a6@cm4: []
    frdmke15z: []
    frdmke16z: []
    frdmke17z: []
    frdmke17z512: []
    frdmmcxa153: []
    frdmmcxa156: []
    frdmmcxa166: []
    frdmmcxa276: []
    frdmmcxc242: []
    frdmmcxc444: []
    frdmmcxn236: []
    frdmmcxn947@cm33_core0: []
    frdmmcxw71: []
    frdmrw612: []
    imx95lpd5evk19@cm7: []
    imx95lp4xevk15@cm7: []
    imx95verdinevk@cm7: []
    k32w148evk:
    - +armgcc@debug
    - +armgcc@release
    kw45b41zevk:
    - +armgcc@debug
    - +armgcc@release
    kw45b41zloc: []
    kw47evk@cm33_core0: []
    lpcxpresso51u68: []
    lpcxpresso54628: []
    lpcxpresso54s018: []
    lpcxpresso54s018m: []
    lpcxpresso55s06: []
    lpcxpresso55s16: []
    lpcxpresso55s28: []
    lpcxpresso55s36: []
    lpcxpresso55s69@cm33_core0: []
    lpcxpresso860max: []
    mcimx93autoevk: []
    mcimx93evk: []
    mcimx93qsb: []
    mcxn5xxevk@cm33_core0: []
    mcxn9xxevk@cm33_core0: []
    mcxw72evk@cm33_core0: []
    mimxrt685audevk@cm33: []
    mimxrt700evk@cm33_core1: []
    mimxrt700evk@cm33_core0: []
    rdrw612bga: []
    twrkm34z50mv3: []
    twrkm34z75m: []
    twrkm35z75m: []
