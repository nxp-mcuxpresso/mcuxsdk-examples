# yaml-language-server: $schema=../../../../../scripts/data_schema/example_description_schema.json
#
# Copyright 2024 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
erpc_two_way_rpc_rpmsg_rtos_primary_core:
  use_sysbuild: true
  section-type: application
  contents:
    meta_path: examples/multicore_examples/erpc_two_way_rpc_rpmsg_rtos/primary
    project-root-path: boards/${board}/multicore_examples/erpc_two_way_rpc_rpmsg_rtos/${multicore_foldername}/
    document:
      name: erpc_two_way_rpc_rpmsg_rtos_primary_core
      category: multicore_examples
      brief: 'The Multicore eRPC Two Way RPC RTOS project is a simple demonstration
        program that uses the MCUXpresso SDK software and the Multicore SDK to show
        how to implement the Remote Procedure Call between cores of the multicore
        system. This multicore example shows how both the eRPC client and the eRPC
        server can be setup on one side/core (bidirectional communication) and how
        to handle callback functions in eRPC. The primary core (Core0) creates client
        and server tasks first. The client task releases the secondary core from the
        reset, initializes the RPMsg-Lite erpc transport and once the server task
        is running it configures the arbitrated client. Then the application logic
        is running. The secondary core (Core1) creates client and server tasks two.
        The client task initializes the RPMsg-Lite erpc transport and once the server
        task is running it configures the arbitrated client. Then the application
        logic is running. The client task logic of the Core1 is very simple, it repeatedly
        calls the increaseNumber() erpc function that is implemented on the Core0
        and that increments the counter. The client task logic of the Core0 alternately
        issues either getNumberFromCore0() function implementation on the Core0 or
        getNumberFromCore1() function implementation on the Core1 (erpc call). Then,
        the nestedCallGetNumber() erpc function call is issued that alternately triggers
        either getNumberFromCore1() function implementation on the Core1 (normal erpc
        call) or it triggers the getNumberFromCore0() function implementation on the
        Core0 (nested erpc call, routed through the Core1 erpc server).

        Shared memory usage.

        This multicore example uses the shared memory for data exchange. The shared
        memory region is defined and the size can be adjustable in the linker file.
        The shared memory region start address and the size have to be defined in
        linker file for each core equally. The shared memory start address is then
        exported from the linker to the application.'
      example_readme:
      - examples/multicore_examples/erpc_two_way_rpc_rpmsg_rtos/readme.md
      - examples/_boards/${board}/multicore_examples/erpc_two_way_rpc_rpmsg_rtos/example_board_readme.md
      - examples/_boards/${board}/examples_shared_readme.md
  boards:
    mimxrt700evk@cm33_core0:
    - -armgcc@debug
    - +armgcc@flash_debug
    - +armgcc@flash_release
    - -armgcc@release
    - -iar@debug
    - +iar@flash_debug
    - +iar@flash_release
    - -iar@release
    - -mdk@debug
    - +mdk@flash_debug
    - +mdk@flash_release
    - -mdk@release
    evkmimxrt1160@cm7:
    - +armgcc@flexspi_nor_debug
    - +armgcc@flexspi_nor_release
    - -armgcc@debug
    - -armgcc@release
    - -armgcc@sdram_debug
    - -armgcc@sdram_release
    - +iar@flexspi_nor_debug
    - +iar@flexspi_nor_release
    - -iar@debug
    - -iar@release
    - -iar@sdram_debug
    - -iar@sdram_release
    - +mdk@flexspi_nor_debug
    - +mdk@flexspi_nor_release
    - -mdk@debug
    - -mdk@release
    - -mdk@sdram_debug
    - -mdk@sdram_release
    evkbmimxrt1170@cm7:
    - +armgcc@flexspi_nor_debug
    - +armgcc@flexspi_nor_release
    - -armgcc@debug
    - -armgcc@release
    - -armgcc@sdram_debug
    - -armgcc@sdram_release
    - +iar@flexspi_nor_debug
    - +iar@flexspi_nor_release
    - -iar@debug
    - -iar@release
    - -iar@sdram_debug
    - -iar@sdram_release
    - +mdk@flexspi_nor_debug
    - +mdk@flexspi_nor_release
    - -mdk@debug
    - -mdk@release
    - -mdk@sdram_debug
    - -mdk@sdram_release
    evkmimxrt1180@cm33:
    - +armgcc@flexspi_nor_debug
    - +armgcc@flexspi_nor_release
    - -armgcc@debug
    - -armgcc@release
    - -armgcc@hyperram_debug
    - -armgcc@hyperram_release
    - +iar@flexspi_nor_debug
    - +iar@flexspi_nor_release
    - -iar@debug
    - -iar@release
    - -iar@hyperram_debug
    - -iar@hyperram_release
    - +mdk@flexspi_nor_debug
    - +mdk@flexspi_nor_release
    - -mdk@debug
    - -mdk@release
    - -mdk@hyperram_debug
    - -mdk@hyperram_release
    frdmk32l3a6@cm4: []
    frdmmcxn947@cm33_core0: []
    lpcxpresso55s69@cm33_core0:
    - -armgcc@debug
    mcxn5xxevk@cm33_core0: []
    mcxn9xxevk@cm33_core0: []
    kw47evk@cm33_core0: []
    mcxw72evk@cm33_core0: []
    kw47loc@cm33_core0: []
    frdmmcxw72@cm33_core0: []
