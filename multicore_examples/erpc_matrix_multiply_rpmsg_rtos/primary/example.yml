# yaml-language-server: $schema=../../../../../scripts/data_schema/example_description_schema.json
#
# Copyright 2024 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
erpc_matrix_multiply_rpmsg_rtos_primary_core:
  use_sysbuild: true
  section-type: application
  contents:
    meta_path: examples/multicore_examples/erpc_matrix_multiply_rpmsg_rtos/primary
    project-root-path: boards/${board}/multicore_examples/erpc_matrix_multiply_rpmsg_rtos/${multicore_foldername}/
    document:
      name: erpc_matrix_multiply_rpmsg_rtos_primary_core
      category: multicore_examples
      brief: 'The Multicore eRPC Matrix Multiply RTOS project is a simple demonstration
        program that uses the MCUXpresso SDK software and the Multicore SDK to show
        how to implement the Remote Procedure Call between cores of the multicore
        system. The primary core (eRPC client) releases the secondary core (eRPC server)
        from the reset and then the erpcMatrixMultiply() eRPC call is issued to let
        the secondary core to perform the multiplication of two randomly generated
        matrices. The original matrices and the result matrix is printed out to the
        serial console by the primary core. The matrix multiplication can be issued
        repeatedly when pressing a SW board button. RPMsg-Lite erpc transport layer
        is used in this example application.

        Shared memory usage.

        This multicore example uses the shared memory for data exchange. The shared
        memory region is defined and the size can be adjustable in the linker file.
        The shared memory region start address and the size have to be defined in
        linker file for each core equally. The shared memory start address is then
        exported from the linker to the application.'
      example_readme:
      - examples/multicore_examples/erpc_matrix_multiply_rpmsg_rtos/readme.md
      - examples/_boards/${board}/multicore_examples/erpc_matrix_multiply_rpmsg_rtos/example_board_readme.md
      - examples/_boards/${board}/examples_shared_readme.md
  boards:
    mimxrt700evk@cm33_core0:
    - -armgcc@debug
    - +armgcc@flash_debug
    - +armgcc@flash_release
    - -armgcc@release
    - -iar@debug
    - +iar@flash_debug
    - +iar@flash_release
    - -iar@release
    - -mdk@debug
    - +mdk@flash_debug
    - +mdk@flash_release
    - -mdk@release
    evkmimxrt1160@cm7:
    - +armgcc@flexspi_nor_debug
    - +armgcc@flexspi_nor_release
    - -armgcc@debug
    - -armgcc@release
    - -armgcc@sdram_debug
    - -armgcc@sdram_release
    - +iar@flexspi_nor_debug
    - +iar@flexspi_nor_release
    - -iar@debug
    - -iar@release
    - -iar@sdram_debug
    - -iar@sdram_release
    - +mdk@flexspi_nor_debug
    - +mdk@flexspi_nor_release
    - -mdk@debug
    - -mdk@release
    - -mdk@sdram_debug
    - -mdk@sdram_release
    evkbmimxrt1170@cm7:
    - +armgcc@flexspi_nor_debug
    - +armgcc@flexspi_nor_release
    - -armgcc@debug
    - -armgcc@release
    - -armgcc@sdram_debug
    - -armgcc@sdram_release
    - +iar@flexspi_nor_debug
    - +iar@flexspi_nor_release
    - -iar@debug
    - -iar@release
    - -iar@sdram_debug
    - -iar@sdram_release
    - +mdk@flexspi_nor_debug
    - +mdk@flexspi_nor_release
    - -mdk@debug
    - -mdk@release
    - -mdk@sdram_debug
    - -mdk@sdram_release
    evkmimxrt1180@cm33:
    - +armgcc@flexspi_nor_debug
    - +armgcc@flexspi_nor_release
    - -armgcc@debug
    - -armgcc@release
    - -armgcc@hyperram_debug
    - -armgcc@hyperram_release
    - +iar@flexspi_nor_debug
    - +iar@flexspi_nor_release
    - -iar@debug
    - -iar@release
    - -iar@hyperram_debug
    - -iar@hyperram_release
    - +mdk@flexspi_nor_debug
    - +mdk@flexspi_nor_release
    - -mdk@debug
    - -mdk@release
    - -mdk@hyperram_debug
    - -mdk@hyperram_release
    frdmk32l3a6@cm4: []
    frdmmcxn947@cm33_core0: []
    lpcxpresso55s69@cm33_core0: []
    mcxn5xxevk@cm33_core0: []
    mcxn9xxevk@cm33_core0: []
    kw47evk@cm33_core0: []
    mcxw72evk@cm33_core0: []
    kw47loc@cm33_core0: []
    frdmmcxw72@cm33_core0: []
