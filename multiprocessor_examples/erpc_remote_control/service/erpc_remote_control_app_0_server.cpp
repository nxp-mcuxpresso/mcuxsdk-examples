/*
 * Copyright (c) 2014-2016, Freescale Semiconductor, Inc.
 * Copyright 2016 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.13.0 on Thu Apr 18 09:37:38 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpc_remote_control_app_0_server.hpp"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11300 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;
using namespace erpcShim;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif


//! @brief Function to write struct BoardConfig
static void write_BoardConfig_struct(erpc::Codec * codec, const BoardConfig * data);

//! @brief Function to write struct AdcConfig
static void write_AdcConfig_struct(erpc::Codec * codec, const AdcConfig * data);

//! @brief Function to write struct Vector
static void write_Vector_struct(erpc::Codec * codec, const Vector * data);


// Write struct BoardConfig function implementation
static void write_BoardConfig_struct(erpc::Codec * codec, const BoardConfig * data)
{
    if(NULL == data)
    {
        return;
    }

    codec->write(data->DAC);

    codec->write(data->MAG);

    for (uint32_t arrayCount0 = 0U; arrayCount0 < 3U; ++arrayCount0)
    {
        codec->write(data->RGB[arrayCount0]);
    }
}

// Write struct AdcConfig function implementation
static void write_AdcConfig_struct(erpc::Codec * codec, const AdcConfig * data)
{
    if(NULL == data)
    {
        return;
    }

    codec->write(data->vref);

    codec->write(data->atomicSteps);
}

// Write struct Vector function implementation
static void write_Vector_struct(erpc::Codec * codec, const Vector * data)
{
    if(NULL == data)
    {
        return;
    }

    codec->write(data->A_x);

    codec->write(data->A_y);

    codec->write(data->A_z);

    codec->write(data->M_x);

    codec->write(data->M_y);

    codec->write(data->M_z);
}



remote_control_app_0_service::remote_control_app_0_service(remote_control_app_0_interface *_remote_control_app_0_interface)
    : erpc::Service(remote_control_app_0_interface::m_serviceId)
    , m_handler(_remote_control_app_0_interface)
{
}

remote_control_app_0_service::~remote_control_app_0_service()
{
}

// return service interface handler.
remote_control_app_0_interface* remote_control_app_0_service::getHandler(void)
{
    return m_handler;
}

// Call the correct server shim based on method unique ID.
erpc_status_t remote_control_app_0_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory, Transport * transport)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case remote_control_app_0_interface::m_get_board_configId:
        {
            erpcStatus = get_board_config_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case remote_control_app_0_interface::m_get_adc_configId:
        {
            erpcStatus = get_adc_config_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case remote_control_app_0_interface::m_convert_dac_adcId:
        {
            erpcStatus = convert_dac_adc_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case remote_control_app_0_interface::m_read_mag_accelId:
        {
            erpcStatus = read_mag_accel_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case remote_control_app_0_interface::m_set_ledId:
        {
            erpcStatus = set_led_shim(codec, messageFactory, transport, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for get_board_config of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::get_board_config_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    BoardConfig *config = NULL;

    // startReadMessage() was already called before this shim was invoked.

    config = (BoardConfig *) erpc_malloc(sizeof(BoardConfig));
    if (config == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        m_handler->get_board_config(config);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, remote_control_app_0_interface::m_serviceId, remote_control_app_0_interface::m_get_board_configId, sequence);

        write_BoardConfig_struct(codec, config);

        err = codec->getStatus();
    }

    erpc_free(config);

    return err;
}

// Server shim for get_adc_config of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::get_adc_config_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    AdcConfig *config = NULL;

    // startReadMessage() was already called before this shim was invoked.

    config = (AdcConfig *) erpc_malloc(sizeof(AdcConfig));
    if (config == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        m_handler->get_adc_config(config);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, remote_control_app_0_interface::m_serviceId, remote_control_app_0_interface::m_get_adc_configId, sequence);

        write_AdcConfig_struct(codec, config);

        err = codec->getStatus();
    }

    erpc_free(config);

    return err;
}

// Server shim for convert_dac_adc of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::convert_dac_adc_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint32_t numberToConvert;
    uint32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(numberToConvert);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        m_handler->convert_dac_adc(numberToConvert, &result);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, remote_control_app_0_interface::m_serviceId, remote_control_app_0_interface::m_convert_dac_adcId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for read_mag_accel of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::read_mag_accel_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    Vector *results = NULL;
    bool status;

    // startReadMessage() was already called before this shim was invoked.

    results = (Vector *) erpc_malloc(sizeof(Vector));
    if (results == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        m_handler->read_mag_accel(results, &status);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, remote_control_app_0_interface::m_serviceId, remote_control_app_0_interface::m_read_mag_accelId, sequence);

        write_Vector_struct(codec, results);

        codec->write(status);

        err = codec->getStatus();
    }

    erpc_free(results);

    return err;
}

// Server shim for set_led of remote_control_app_0 interface.
erpc_status_t remote_control_app_0_service::set_led_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t whichLed;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(whichLed);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        m_handler->set_led(whichLed);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif
    }

    return err;
}
