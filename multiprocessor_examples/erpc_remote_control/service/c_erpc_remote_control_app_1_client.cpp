/*
 * Copyright (c) 2014-2016, Freescale Semiconductor, Inc.
 * Copyright 2016 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.13.0 on Thu Apr 18 09:37:38 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "c_erpc_remote_control_app_1_client.h"
#include "erpc_remote_control_app_1_client.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
remote_control_app_1_client *s_remote_control_app_1_client = nullptr;
#else
ERPC_MANUALLY_CONSTRUCTED_STATIC(remote_control_app_1_client, s_remote_control_app_1_client);
#endif

void button_pressed(uint32_t which)
{
    s_remote_control_app_1_client->button_pressed(which);
}

void initremote_control_app_1_client(erpc_client_t client)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(s_remote_control_app_1_client == nullptr);
    s_remote_control_app_1_client = new remote_control_app_1_client(reinterpret_cast<ClientManager *>(client));
#else
    erpc_assert(!s_remote_control_app_1_client.isUsed());
    s_remote_control_app_1_client.construct(reinterpret_cast<ClientManager *>(client));
#endif
}

void deinitremote_control_app_1_client(void)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (s_remote_control_app_1_client != nullptr)
    {
        delete s_remote_control_app_1_client;
        s_remote_control_app_1_client = nullptr;
    }
#else
    s_remote_control_app_1_client.destroy();
#endif
}
