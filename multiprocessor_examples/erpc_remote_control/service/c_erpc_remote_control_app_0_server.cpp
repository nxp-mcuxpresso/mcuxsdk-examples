/*
 * Copyright (c) 2014-2016, Freescale Semiconductor, Inc.
 * Copyright 2016 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.13.0 on Thu Apr 18 09:37:38 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include <new>
#include "c_erpc_remote_control_app_0_server.h"
#include "erpc_remote_control_app_0_server.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


class remote_control_app_0_server: public remote_control_app_0_interface
{
    public:
        virtual ~remote_control_app_0_server() {};


        void get_board_config(BoardConfig * config)
        {
            ::get_board_config(config);
        }

        void get_adc_config(AdcConfig * config)
        {
            ::get_adc_config(config);
        }

        void convert_dac_adc(uint32_t numberToConvert, uint32_t * result)
        {
            ::convert_dac_adc(numberToConvert, result);
        }

        void read_mag_accel(Vector * results, bool * status)
        {
            ::read_mag_accel(results, status);
        }

        void set_led(uint8_t whichLed)
        {
            ::set_led(whichLed);
        }
};

ERPC_MANUALLY_CONSTRUCTED_STATIC(remote_control_app_0_service, s_remote_control_app_0_service);
ERPC_MANUALLY_CONSTRUCTED_STATIC(remote_control_app_0_server, s_remote_control_app_0_server);

erpc_service_t create_remote_control_app_0_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) remote_control_app_0_service(new (nothrow)remote_control_app_0_server());
#else
    if (s_remote_control_app_0_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_remote_control_app_0_server.construct();
        s_remote_control_app_0_service.construct(s_remote_control_app_0_server.get());
        service = s_remote_control_app_0_service.get();
    }
#endif

    return service;
}

void destroy_remote_control_app_0_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (service)
    {
        delete (remote_control_app_0_server *)(((remote_control_app_0_service *)service)->getHandler());
        delete (remote_control_app_0_service *)service;
    }
#else
    (void)service;
    erpc_assert(service == s_remote_control_app_0_service.get());
    s_remote_control_app_0_service.destroy();
    s_remote_control_app_0_server.destroy();
#endif
}

